<!doctype html>

<html dir="ltr" lang="en-GB">

	<head>
	
		<meta charset="UTF-8">
		
		<title>onPaste clipboardData support</title>
	
		<meta name="description" content="exploring ideas of the semantic web and data portability">			
		
		<link rel="stylesheet" href="http://f.fontdeck.com/s/css/uGM6XGrcU8CaXprKriRGNyCabyM/glennjones.net/5198.css" type="text/css" />
        <link rel="shortcut icon" href="../images/logo16.png" />
		<link rel="stylesheet" media="all" href="../css/style.css">
        <link rel="stylesheet" media="all" href="../css/event-tests.css">
        <link rel="stylesheet" media="all" href="../css/sharebuttons.css">					
        <script src="Js/jquery-1.3.2.min.js" type="text/javascript"></script>
		
	</head>
	
	<body class="home blog">
	
		<div id="wrapper">

			<header id="site-header" role="banner">
				<hgroup id="branding">
					<h1 id="site-title"><a href="http://codebits.glennjones.net">Codebits ~ Glenn Jones</a></h1>				
					<h2 id="tag">exploring ideas of the semantic web and data portability</h2>
				</hgroup>
			</header>

		
			<div id="content" role="main">

	            <article class="post type-post hentry">
		            <header class="entry-header">
			            <h1 class="entry-title"><a href="http://codebits.glennjones.net/editing/getclipboarddata.htm">onPaste clipboardData support</a></h1>
			            <div class="entry-meta">
				            <p><time datetime="2011-04-23" pubdate>April 23, 2011</time></p>
			            </div>
 
		            </header>
		            <div class="entry-content">

                    <p>
                    Some of the current browsers support a clipboardData property as part of a paste event. This should allow you to query the 
                    different data formats created from the current data on the clipboard. Safari and Chrome have the best support, but it is still incomplete. Firefox 
                    has no support if you discount using the XPCOM objects interface. The IE interface is older and only supports Text or URL data.</p>
                    
                    <p>Firefox, Safari and Chrome all sanitise any HTML being pasted whereas IE does not. Opera will only paste plain text so HTML 
                    sanitisation is not an issue.  This could cause some security issues for IE, try copying and pasting 
                    <a href="javascript:alert('I can steal this page')">this link</a> into the box below.</p>

                    <p>Try it out by pasting content into the box below</p>

                    <div id="edit-box" class="edit-box" contenteditable="true">Paste content here (contentEditable div)</div>

                    <p>Log:</p>
                    <ul id="log-box">
                    </ul>
                    <button id="clear-logs" type="button">Clear logs</button>
                    <input type="text" style="width:98%;" id="ctl00_CPH1_rptTour_ctl00_gvTour_ctl02_txtFlightNum" name="ctl00$CPH1$rptTour$ctl00$gvTour$ctl02$txtFlightNum">
                    <script>

                        // Adds a set of events to the contentEditable div for testing
                        function init() {

                            var node = document.getElementById('ctl00_CPH1_rptTour_ctl00_gvTour_ctl02_txtFlightNum');

                            addEvent(node, 'paste', function (e) {
                                log('paste');
                                if (e.clipboardData) {
                                    log('event.clipboardData');
                                    if (e.clipboardData.types) {
                                        log('event.clipboardData.types');

                                        // Look for a types property that is undefined
                                        // This is currently the case for Firefox
                                        if (!isArray(e.clipboardData.types)) {
                                            log('event.clipboardData.types is undefined');
                                        }

                                        // Loop the data store in type and display it in the log
                                        var i = 0;
                                        while (i < e.clipboardData.types.length) {
                                            var key = e.clipboardData.types[i];
                                            var val = e.clipboardData.getData(key);
                                            log((i + 1) + ': ' + key + ' - ' + val);
                                            i++;
                                        }

                                    } else {
                                        // Look for access to data if types array is missing 
                                        // This is currently the case for Chrome
                                        var text = e.clipboardData.getData('text/plain');
                                        var url = e.clipboardData.getData('text/uri-list');
                                        var html = e.clipboardData.getData('text/html');
                                        log('text/plain - ' + text);
                                        if (url !== undefined) {
                                            log('text/uri-list - ' + url);
                                        }
                                        if (html !== undefined) {
                                            log('text/html - ' + html);
                                        }
                                    }
                                }

                                // IE event is attached to the window object
                                if (window.clipboardData) {
                                    log('window.clipboardData');
                                    // The schema is fixed
                                    var text = window.clipboardData.getData('Text');
                                    var url = window.clipboardData.getData('URL');
                                    log('Text - ' + text);
                                    if (url !== null) {
                                        log('URL - ' + url);
                                    }
                                }

                                // Needs a few msec to excute paste
                                window.setTimeout(logContents, 50, true);

                            });

                           

                            // Button events
                            var btn = document.getElementById('clear-logs');
                            addEvent(btn, 'click', function (e) {
                                clearLog();
                            });
                        }


                        function logContents() {
                            var node = document.getElementById('edit-box');
                            log('Current contents - ' + node.innerHTML);
                        }


                        // Add log item by creating and appending an li
                        function log(str) {
                            var node = document.getElementById('log-box');
                            var li = document.createElement('li')
                            li.appendChild(document.createTextNode(str));
                            node.appendChild(li);
                        }


                        // Clears the log by removing all the li tags
                        function clearLog() {
                            var node = document.getElementById('log-box');
                            while (node.firstChild) {
                                node.removeChild(node.firstChild);
                            }
                        }



                        // Is any object an array
                        function isArray(obj) {
                            return obj && !(obj.propertyIsEnumerable('length')) && typeof obj === 'object' && typeof obj.length === 'number';
                        };


                        // Cross browser add event support - old style
                        function addEvent(obj, type, fn) {
                            if (obj) {
                                if (obj.attachEvent) {
                                    obj['e' + type + fn] = fn;
                                    obj[type + fn] = function () { obj['e' + type + fn](window.event); };
                                    obj.attachEvent('on' + type, obj[type + fn]);
                                } else {
                                    obj.addEventListener(type, fn, false);
                                }
                            }
                        };

                        addEvent(window, 'load', init);

                    
                    </script>

                <div class="secondary-content">

                        <h2>Browser compatibility tables</h2>
                        <table class="compatibility">
	                    <tr>
		                    <td>&nbsp;</td>
		                    <td>Firefox 4.0</td>
		                    <td>Chrome 10.0</td>
		                    <td>Safari 5.0</td>
		                    <td>Internet Explorer 9.0</td>
		                    <td>Opera 11.1</td>
	                    </tr>
	                    <tr>
		                    <td>paste event</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>clipboardData</td>
		                    <td class="no">No</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>clipboardData.types</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
	                    </tr>
                        <tr>
		                    <td>clipboardData.getData</td>
		                    <td class="no">No</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>clipboardData.setData</td>
		                    <td class="no">No</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
	                    </tr>
                        <tr>
		                    <td>mime types</td>
		                    <td class="no">No</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>window.clipboardData</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>event.clipboardData</td>
		                    <td class="no">No</td>
		                    <td class="yes">Yes</td>
		                    <td class="yes">Yes</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
	                    </tr>
	                    <tr>
		                    <td>custom types</td>
		                    <td class="no">No</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="incomplete">Incomplete</td>
		                    <td class="no">No</td>
		                    <td class="no">No</td>
	                    </tr>
	      
	       
                    </table>

                    <h2>Notes</h2>

                    <p>Only Safari supports the <strong>clipboardData.types</strong> array which should list all the supported data formats 
                    for a given clipboard item. A copied piece of HTML could be represented as text/plain, 
                    text/html and text/url-list. Although Safari's clipboardData.types contains some mine types 
                    it is not a complete list.</p>

                    <p>Both Safari and Chrome seem currently unable to set custom data during the copy event using 
                    the <strong>clipboardData.setData</strong> method.</p> 

       

                    <h2>Useful Links</h2>
                    <ul>
                        <li><a href="http://almaer.com/blog/2009/02">Bespin - lessions from adding copy and paste</a></li>
                        <li><a href="http://developer.apple.com/library/mac/#documentation/AppleApplications/Conceptual/SafariJSProgTopics/Tasks/CopyAndPaste.html">Safari using the Pasteboard article</a></li>
                        <li><a href="http://msdn.microsoft.com/en-us/library/ms535220%28v=vs.85%29.aspx">IE's clipboardData Object</a></li>
                        <li><a href="https://developer.mozilla.org/en/Using_the_Clipboard">Firefox's XPCOM clipboard interface</a></li>
                    </ul>


                    <p class="intent-buttons">

                        <a href="https://twitter.com/intent/tweet?text=The%20Download%20Attribute%20a%5Bdownload%5D&url=onPaste%20clipboardData%20support" 
                        target="_blank" rel="nofollow"
                        title="Tweet this on Twitter"
                        data-verb="share" 
                        data-vendor="Twitter"
                        data-format="small"
                        data-description="onPaste clipboardData support"
                        data-url-short="http://bit.ly/pMnfRG" 
                        data-url-canonical="http://codebits.glennjones.net/editing/getclipboarddata.htm">Tweet</a>

                        <a href="http://www.linkedin.com/shareArticle?mini=true&url=http%3A%2F%2Fbit.ly%2FpMnfRG&title=onPaste%20clipboardData%20support&ro=false&summary=onPaste%20clipboardData%20support&source=" 
                        target="_blank" rel="nofollow"
                        title="Share this on Linkedin"
                        data-verb="share" 
                        data-vendor="Linkedin"
                        data-format="small"
                        data-title="onPaste clipboardData support"
                        data-description="onPaste clipboardData support"
                        data-url-short="http://bit.ly/pMnfRG" 
                        data-url-canonical="http://codebits.glennjones.net/editing/getclipboarddata.htm">Share</a>

                        <a href="http://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fbit.ly%2FpMnfRG&t=onPaste%20clipboardData%20support" 
                        target="_blank" rel="nofollow"
                        title="Like this on Facebook"
                        data-verb="share" 
                        data-vendor="Facebook"
                        data-format="small"
                        data-title="onPaste clipboardData support"
                        data-url-short="http://bit.ly/pMnfRG" 
                        data-url-canonical="http://codebits.glennjones.net/editing/getclipboarddata.htm">Share</a>
    
                        <a 
                        data-verb="share" 
                        data-vendor="Google+"
                        data-format="medium"
                        data-title="onPaste clipboardData support"
                        data-url-short="http://bit.ly/pMnfRG" 
                        data-url-canonical="http://codebits.glennjones.net/editing/getclipboarddata.htm"></a>
    
                    </p>   



                    </div>

                    </div>
	            </article>

            </div> <!-- end content -->


            <div id="sidebar">
	            <aside id="universal" class="sidebar" role="complementary">
		            <section id="pages-3" class="widgetContainer widget_pages">		
                    <ul>
                        <li class="page_item"><a href="../index.htm" title="Bits of demo and test code">Codebits</a></li>
                        <li class="page_item"><a href="http://glennjones.net/" title="Blog">Blog</a></li>
			            <li class="page_item"><a href="http://glennjones.net/about/" title="About me">About</a></li>
                        <li class="page_item"><a href="http://glennjones.net/projects/" title="Larger projects">Projects</a></li>
                        <li class="page_item"><a href="http://glennjones.net/speaking/" title="Speaking events">Speaking</a></li>
		            </ul>
		            </section>
	            </aside>
            </div>

			<footer id="site-footer" role="contentinfo">
                <p>All content and code is licensed under <a rel="license" href="http://creativecommons.org/licenses/by-sa/2.0/uk/">Creative Commons Share Alike 2.0</a>
			    <small>&copy; 2011 Glenn Jones &#8764; exploring ideas of the semantic web and data portability.</small></p>
            </footer>
		
		</div>
        


        <script type="text/javascript">
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-3021774-2']);
            _gaq.push(['_trackPageview']);
            (function () {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();
        </script>
        
         
	</body>
</html>